#!groovy
//  groovy Jenkinsfile
properties([disableConcurrentBuilds()])

def img = $(docker ps | grep denyshchuk/asp.net | wc -l)


pipeline  {
    agent { 
        label 'master'
        }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    stages {
        stage("Create docker image") {
            steps {
                echo 'Creating docker image ...'
                dir('.'){
                    sh "docker build -t denyshchuk/asp.net . "
                }
            }
        }
        stage("docker login") {
            steps {
                echo " ============== docker login =================="
                echo " ============== IMG ${img} =================="
                withCredentials([usernamePassword(credentialsId: 'DH-Cred', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh '''
                    docker login -u $USERNAME -p $PASSWORD
                    '''
                }
            }
        }
        stage("docker push") {
            steps {
                echo " ============== pushing image =================="
                sh '''
                docker push denyshchuk/asp.net:latest
                '''
            }
        }
        stage("docker stop") {
            steps {
                echo " ============== stoping all images =================="
                sh '''
                docker stop asp.net
                '''}
            }
        
       stage("docker remove") {
          steps {
               echo " ============== removing all docker containers =================="
               sh '''
               docker rm asp.net
              '''
           }
       }
        stage("docker run") {
          steps {
               echo " ============== starting chatterbox server =================="
               sh '''
               docker run -d --restart=always --name asp.net -p 80:80 denyshchuk/asp.net
                '''
           }
        }
        // stage("Deploy to stage server") {
        //     steps {
        //         echo " ============== Running playbook =================="
        //         sh '''
        //         ansible-playbook toolbox/ansible/playbooks/demloyToStageServer.yml
        //         '''
        //     }
        //}

    }
}